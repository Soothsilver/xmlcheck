<?php
require_once __DIR__ . '/TestOfCorrectivePlugin.php';
$watcher = new \TestOfCorrectivePlugin();
echo "<u>XQuery</u>";
$test = $watcher->runTest("Warplan", PluginName::XQuery, "XQuery/PetrHudecekXQuery.zip", array(5));
$watcher->assertFulfillment($test, 100);
echo "<br><br>";
echo "<u>DOM/SAX Java</u>";
$test = $watcher->runTest("Warplan", PluginName::DomSax, "DOMSAX/PetrHudecekDomSax.zip", array());
$watcher->assertFulfillment($test, 100);
echo "<br><br>";
echo "<u>XSLT Template</u>";
$test = $watcher->runTest("Vojtech Vondra's Test Case (strange XPath expressions)", PluginName::Xslt, "XSLT/VojtechVondra.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Tomas Hogenauer's Test Case (XML 1.1)", PluginName::Xslt, "XSLT/TomasHogenauer.zip", array(5));
$watcher->assertDetailsContains($test, "Unsupported version '1.1'");
$test = $watcher->runTest("Warplan (correct)", PluginName::Xslt, "XSLT/warplan_xslt.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Warplan (uses XSLT 2.0)", PluginName::Xslt, "XSLT/warplan_xslt_version2.zip", array(5));
$watcher->assertDetailsContains($test, "only 1.0 features are supported");
$watcher->assertFulfillment($test, 50);
$test = $watcher->runTest("XSL namespace is named 'nero'", PluginName::Xslt, "XSLT/nero_namespace.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Warplan (filenames changed)", PluginName::Xslt, "XSLT/weirdnames.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Two XML files, two XSL files", PluginName::Xslt, "XSLT/multi.zip", array(5));
$watcher->assertDetailsContains($test, "There are two or more .xsl files in your submission.");
$watcher->assertDetailsContains($test, "There are two or more .xml files in your submission.");
echo "<br>";
echo "<br><u>XML Schema</u>";
$test = $watcher->runTest("Simon Rozsival's Test Case", PluginName::XmlSchema, "Schema/SimonRozsival.zip", array());
$watcher->assertFulfillment($test, 75);
$watcher->assertDetailsContains($test, "defined mandatory attributes");
$test = $watcher->runTest("Alexander Mansurov's Test Case (uses ASSERT)", PluginName::XmlSchema, "Schema/AlexanderMansurov.zip", array());
$watcher->assertFulfillment($test, 50);
$test = $watcher->runTest("Alexander Mansurov's Test Case (no assert, no locally defined)", PluginName::XmlSchema, "Schema/AlexanderNoAssert.zip", array());
$watcher->assertFulfillment($test, 75);
$test = $watcher->runTest("Warplan Prior", PluginName::XmlSchema, "Schema/warplan_one.zip", array());
$watcher->assertFulfillment($test, 75);
$test = $watcher->runTest("Warplan (with optional attribute)", PluginName::XmlSchema, "Schema/warplan_withoptional.zip", array());
$watcher->assertFulfillment($test, 75);
$test = $watcher->runTest("Warplan (XML does not refer to XmlSchema)", PluginName::XmlSchema, "Schema/warplan_norefer.zip", array());
$watcher->assertFulfillment($test, 75);
$test = $watcher->runTest("Warplan (XML does not refer to any schema)", PluginName::XmlSchema, "Schema/warplan_noschema.zip", array());
$watcher->assertFulfillment($test, 75);
$test = $watcher->runTest("Warplan (correct)", PluginName::XmlSchema, "Schema/warplan.zip", array());
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Warplan (non-xs namespace)", PluginName::XmlSchema, "Schema/warplan_namespace.zip", array());
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Non-data.xml, non-data.xsd filenames", PluginName::XmlSchema, "Schema/diff_names_ok.zip", array());
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Non-data.xml, non-data.xsd filenames, bad referral in schemaLocation", PluginName::XmlSchema, "Schema/diff_names.zip", array());
$watcher->assertFulfillment($test, 75);
$test = $watcher->runTest("Refer via schemaInstance", PluginName::XmlSchema, "Schema/schemaInstance.zip", array());
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Refer via schemaInstance incorrectly", PluginName::XmlSchema, "Schema/schemaInstance_wrong.zip", array());
$watcher->assertDetailsContains($test, "The schemaLocation's attribute value's second part is not identical to the XSD filename found.");
echo "<br>";
echo "<br><u>DTD2014</u>";
$test = $watcher->runTest("Internal subset", PluginName::DTD2014, "DTD/internalSubset.zip", array(0,0));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Internal subset with conditional section", PluginName::DTD2014, "DTD/internalSubsetConditionalSection.zip", array(0,0));
$watcher->assertFulfillment($test, 14);
$test = $watcher->runTest("Diacritics", PluginName::DTD2014, "DTD/diakritika.zip", array(0,0));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("UTF-16, Little Endian, with BOM, both XML and DTD", PluginName::DTD2014, "DTD/utf16lebom_twice.zip", array(0,0));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("UTF-16, Big Endian, with BOM, both XML and DTD", PluginName::DTD2014, "DTD/utf16bebom_twice.zip", array(0,0));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Declared UTF-8, but really UTF-16 Little Endian With BOM (not good file, but we may handle it anyway)", PluginName::DTD2014, "DTD/utf8_but_utf16le.zip", array(0,0));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("UTF-8 Minimal", PluginName::DTD2014, "DTD/utf8.zip", array(0,0));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Declared UTF-16, but really UTF-8", PluginName::DTD2014, "DTD/chinese.zip", array(0,0));
$watcher->assertDetailsContains($test, "UTF-16 but has UTF-8");
$test = $watcher->runTest("The XML refers to a nonexistent DOCTYPE.", PluginName::DTD2014, "DTD/norefer.zip", array(0,0));
$watcher->assertFulfillment($test, 29);
$test = $watcher->runTest("Stefan Okruhlica's Test Case: Missing encoding", PluginName::DTD2014, "DTD/okruhlica2.zip", array(0,0));
$watcher->assertFulfillment($test, 29);
$test = $watcher->runTest("Stefan Okruhlica's Test Case: Space needed here (missing encoding)", PluginName::DTD2014, "DTD/okruhlica.zip", array(0,0));
$watcher->assertFulfillment($test, 29);
$watcher->assertDetailsContains($test, "common error");
$test = $watcher->runTest("Incorrect inner comment (<!-- --> &lt;!ELEMENT a (EMPTY)> -->)", PluginName::DTD2014, "DTD/badinnercomment.zip", array(0,0));
$watcher->assertFulfillment($test, 0);
$test = $watcher->runTest("Nonstandard file names", PluginName::DTD2014, "DTD/strangenames.zip", array(0,0));
$watcher->assertFulfillment($test, 57);
$test = $watcher->runTest("Minimal example, XML valid to DTD, but not complete (with &lt;!NOTATION&gt;)", PluginName::DTD2014, "DTD/notation.zip", array(0,0));
$watcher->assertFulfillment($test, 57);
$test = $watcher->runTest("Minimal example, XML valid to DTD, but not complete", PluginName::DTD2014, "DTD/minimalValidNotComplete.zip", array(0,0));
$watcher->assertFulfillment($test, 57);
$warplan = $watcher->runTest("Warplan", PluginName::DTD2014, "DTD/XmlDtd_correct_warplan.zip", array(5,10));
$watcher->assertFulfillment($warplan, 100);
$veronika = $watcher->runTest("Veronika Maurerova's Test: Parameter Entity Prevents Id", PluginName::DTD2014, "DTD/Veronika Maurerova.zip", array(5,10));
$watcher->assertFulfillment($veronika, 71);
// Hacked success: bypassing PHP bug https://bugs.php.net/bug.php?id=67012
$notationWithPercentSign = $watcher->runTest("HACKED: Notation with a percent sign in DTD may fail", PluginName::DTD2014, "DTD/notationWithPercentSign.zip", array(5,10));
$watcher->assertFulfillment($notationWithPercentSign, 14);
$watcher->assertDetailsContains($notationWithPercentSign,"Please upload a document without using the percent sign");
$notationWithPercentSign = $watcher->runTest("HACKED: Notation with a percent sign in DTD may fail (+ bad quoting)", PluginName::DTD2014, "DTD/notationWithPercentSign_correct.zip", array(5,10));
$watcher->assertDetailsContains($notationWithPercentSign, "In a general entity declaration, the keyword NDATA must be followed by a Name only. It is followed by something else, however.");
$watcher->assertFulfillment($notationWithPercentSign, 0);
$watcher->assertDetailsContains($notationWithPercentSign,"Please upload a document without using the percent sign");
$imrich = $watcher->runTest("Imrich Kuklis' first test case: Standalone, but with external entity declared (fail expected)", PluginName::DTD2014, "DTD/ImrichKuklis.zip", array(5,10));
$watcher->assertFulfillment($imrich, 29);
$watcher->assertDetailsContains($imrich,"document marked standalone but requires external subset");
$imrich2 = $watcher->runTest("Imrich Kuklis' second test case: Conditional sections", PluginName::DTD2014, "DTD/ImrichKuklisFixed.zip", array(5,10));
$watcher->assertFulfillment($imrich2, 86);
$veronika3 = $watcher->runTest("Veronika Maurerova's Last Test Case Without Parameter Entities", PluginName::DTD2014, "DTD/VeronikaLastFixed.zip", array(5,10));
$watcher->assertFulfillment($veronika3, 71);
$watcher->assertDetailsContains($veronika3, "Documents contain 5 maximum fan-out of (minimum of 10 required");
$xmlfile = $watcher->runTest("Xml file, not Zip", PluginName::DTD2014, "DTD/data.xml", array(5,10));
$watcher->assertFulfillment($xmlfile, 0);
$watcher->assertDetailsContains($xmlfile,"ZIP extraction failed");
$test = $watcher->runTest("No DTD file", PluginName::DTD2014, "DTD/nodtd.zip", array(0,0));
$watcher->assertFulfillment($test, 0);
$test = $watcher->runTest("Two XML files", PluginName::DTD2014, "DTD/multiplexml.zip", array(0,0));
$watcher->assertFulfillment($test, 0);
$emptyZipFile = $watcher->runTest("Empty ZIP file", PluginName::DTD2014, "DTD/empty.zip", array(5,10));
$watcher->assertFulfillment($emptyZipFile, 0);
$watcher->assertDetailsContains($emptyZipFile,"ZIP extraction failed");
$notZip = $watcher->runTest("Not a ZIP file, with ZIP extension", PluginName::DTD2014, "DTD/notZip.txt.zip", array(5,10));
$watcher->assertFulfillment($notZip, 0);
$watcher->assertDetailsContains($notZip,"ZIP extraction failed");
echo "<br>";
echo "<br><u>XPath</u>";
$minimal = $watcher->runTest("XPath Minimal Example", PluginName::XPath, "XPath/minimalExample.zip", array(5));
$watcher->assertFulfillment($minimal, 100);
$test = $watcher->runTest("XPath Invalid Comments", PluginName::XPath, "XPath/minimalExampleBadComments.zip", array(5));
$watcher->assertFulfillment($test, 33);
$test = $watcher->runTest("XPath Missing Descendant Nonexistence Tests", PluginName::XPath, "XPath/minimalExampleNoDescendantNonexistence.zip", array(5));
$watcher->assertFulfillment($test, 67);
$test = $watcher->runTest("XPath Position is given using abbreviation", PluginName::XPath, "XPath/minimalExampleAbbreviatedPosition.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("XPath There is whitespace in position predicate", PluginName::XPath, "XPath/minimalExampleWithPositionSpace.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("XPath Warplan. DTD supplied.", PluginName::XPath, "XPath/warplanXpathDtd.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("XPath Descendant test has its own predicate", PluginName::XPath, "XPath/minimalExampleDescendantWithPredicate.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("XPath Rightside Position", PluginName::XPath, "XPath/minimalExampleRightSidePosition.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Pavel Brozek's Test Case", PluginName::XPath, "XPath/brozek.zip", array(5));
$watcher->assertFulfillment($test, 100);
$test = $watcher->runTest("Jiri Svancara's Test Case", PluginName::XPath, "XPath/jiriSvancara.zip", array(5));
$watcher->assertFulfillment($test, 100);
