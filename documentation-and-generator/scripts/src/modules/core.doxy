/**

@defgroup core Core

Provides main @projectname functionality.

Programming language: <b>PHP</b> \n
Function: <b>interaction between other parts, main application logic</b> \n
Interacts with: <b>@ref ui, @ref database, @ref plugins</b> \n

Core is server-based part of @projectname that contains main application logic.


@section sec_coreBehavior Behavior

Core performes various tasks upon receiving @ref requests "requests" from @ref ui corresponding
to those tasks (henceforth known as "core requests"). Request and result format
is described in @ref sec_coreInterfaces section. Apart from that the Core is "dead" -
there are no Core processes running on the server that were not directly
triggered by @ref ui request.

Core uses @ref database for data storage.

@subsection sec_coreErrorLogging Error logging

Errors that occured during request handling are logged to log files. "System log"
entries can be retrieved using @ref asm::core::GetSystemLog "GetSystemLog" request.
Log is rotated (5 files, max. 2MB each), entries are separated with <tt>\\n-\\n</tt>,
lines with <tt>\\n\\n</tt>, <tt>\\t</tt>, date is formatted as MySQL timestamp
(see @ref asm::utils::Logger "Logger" for more info), so that the log is easily
readable. Log entry header contains username, remote IP address from which the
request came, and remote hostname.

@section sec_coreTasks Tasks

Following tasks are managed by application Core:

@subsection sec_coreUserSessions User session management

There are only few core requests that do not require user to be authenticated,
and they are mostly related to getting authenticated. Login requires user name
and password of a valid user account.
@ref asm::core::User "User session" is started upon successful
login, based on PHP session (implementation depends on PHP configuration).
Session stays open until set time runs out (timeout can be postponed). User's
permissions are determined on session start and used to determine whether to
allow or deny every subsequent request until session ends.

@subsubsection sec_coreUserSessionsReq Requests

@ref asm::core::Login "Login", @ref asm::core::Logout "Logout",
@ref asm::core::RefreshSession "RefreshSession"


@subsection sec_coreUsers User management

Allow creation, management, and removal of users and user groups (more often
called "user types" throughout the documentation). Each user belongs to exactly
one user group, which determines his privileges. Default user type ("student")
may not be removed and it is used as fallback for users whose user type is removed
from the system. It may, however, be stripped of all privileges.

Users can be created in two different ways. One way is to register new user account,
which can be done without user authentication. It creates new inactive account
belonging to default user group and sends e-mail with activation code to e-mail address
entered as part of user account details. Only after the account is activated
using that code, can the user log in using the new account and access appropriate
application features. Other way is to create full-fledged user account of any
user type, but requires user creation privilege. In that case, user account is
active immediately upon creation.

@subsubsection sec_coreUsersReq Requests

@ref asm::core::GetUsers "GetUsers", @ref asm::core::EditUser "EditUser",
@ref asm::core::Activate "Activate", @ref asm::core::DeleteUser "DeleteUser",
@ref asm::core::GetUsertypes "GetUsertypes", @ref asm::core::EditUsertype "EditUsertype",
@ref asm::core::DeleteUsertype "DeleteUsertype"

@subsection sec_corePlugins Plugin management

Important @projectname feature is the ability to (partially) correct submitted
solutions. It is achieved using plugins, which can be added and removed as needed.
Required format of plugins is described in @ref asm::core::AddPlugin "AddPlugin"
request. Plugins can also be tested without the need to create problems and
assignments. Once added, plugins may not be changed in any way.

@subsubsection sec_corePluginsReq Requests

@ref asm::core::GetPlugins "GetPlugins", @ref asm::core::AddPlugin "AddPlugin",
@ref asm::core::DeletePlugin "DeletePlugin", @ref asm::core::GetPluginTests "GetPluginTests",
@ref asm::core::AddPluginTest "AddPluginTest", @ref asm::core::DeletePluginTest "DeletePluginTest",
@ref asm::core::DownloadPluginTestInput "DownloadPluginTestInput",
@ref asm::core::DownloadPluginTestOutput "DownloadPluginTestOutput"

@subsection sec_coreLectures Lecture management

Main @projectname functionality starts with management of lectures. In context
of this applicaton, lectures are basically groups of problems that can be assigned
to students as homework. Each problem belongs to exactly one lecture and consists
of detailed description and optionally configuration of plugin used for correction
of solutions submitted for this problem.

@subsubsection sec_coreLecturesReq Requests

@ref asm::core::GetLectures "GetLectures", @ref asm::core::EditLecture "EditLecture",
@ref asm::core::DeleteLecture "DeleteLecture", @ref asm::core::GetProblems "GetProblems",
@ref asm::core::EditProblem "EditProblem", @ref asm::core::DeleteProblem "DeleteProblem"

@subsection sec_coreGroups Assignment group management

Following lecture & excercise group model used at <a href="www.cuni.cz">Charles
University in Prague</a>, users are divided into "assignment groups" (simply called
"groups" throughout this documentation). Lectures and groups are owned by user
that created them, but group owner may be different from lecture owner to
allow delegation of assignment management and correction to tutors of real-world
excercise groups.

@image html lectureGroupSystem.png "Lecture & group ownership"

However, only problems belonging to the lecture the group is bound to can be
assigned to students in that group, which means that all students attending the
same lecture can easily be assigned the same problems.

Users can subscribe to assignment groups to be able to see those groups' assignments
and submit solutions. Groups can be either public or private, which determines
whether users can subscribe to them directly, or must send subscription request
and wait for the group owner to allow the subscription.

@subsubsection sec_coreGroupsReq Requests

@ref asm::core::GetGroups "GetGroups", @ref asm::core::EditGroup "EditGroup",
@ref asm::core::DeleteGroup "DeleteGroup", @ref asm::core::GetAssignments "GetAssignments",
@ref asm::core::EditAssignment "EditAssignment", @ref asm::core::DeleteAssignment "DeleteAssignment",
@ref asm::core::GetAvailableGroups "GetAvailableGroups",
@ref asm::core::GetSubscriptions "GetSubscriptions", @ref asm::core::AddSubscription "AddSubscription",
@ref asm::core::DeleteSubscription "DeleteSubscription",
@ref asm::core::GetSubscriptionRequests "GetSubscriptionRequests",
@ref asm::core::PermitSubscription "PermitSubscription",
@ref asm::core::ProhibitSubscription "ProhibitSubscription"

@subsection sec_coreAssignments Hand-in and correction of problem solutions

Users subscribed to @ref sec_coreGroups "Assignment groups" can submit solutions to
given assignments. Entities binding together such solutions with submit info
(date) and results and output created by plugin during solution processing are
called "submissions" throughout this documentation. (Plugin output is considered
to be part of the solution to be viewed by group owner before rating the
submission.) Life cycle of a submission is described in following diagram:

@image html submission.state.png "Submission states"

Submission relationship to other entities is described by following diagram:

@image html submission.png "Submission composition"

@subsubsection sec_coreAssignmentsReq Requests

@ref asm::core::GetStudentAssignments "GetStudentAssignments",
@ref asm::core::GetSubmissions "GetSubmissions", @ref asm::core::AddSubmission "AddSubmission",
@ref asm::core::ConfirmSubmission "ConfirmSubmission",
@ref asm::core::DownloadSubmissionInput "DownloadSubmissionInput"
@ref asm::core::DownloadSubmissionOutput "DownloadSubmissionOutput",
@ref asm::core::GetTeacherSubmissions "GetTeacherSubmissions",
@ref asm::core::RateSubmission "RateSubmission"


@section sec_coreInterfaces Interfaces

Core interacts with @ref ui, @ref database, and @ref plugins. Interface with
@ref database is explained on its page (and is mostly private at this time).

@subsection sec_coreInterfaceUi Core <-> UI

@ref ui communicates with @ref core using HTTP POST (and possibly GET) requests.
Each request must have @c action property set and it must contain valid request
name. Other requirements are request-specific (see @ref requests).

In response to requests, @ref core may return either an output file (in some special
cases), or JSON-encoded result data. Result data is an object with two properties.
Property @c data contains request-specific result data (or may be empty in case
of errors). Property @c errors is set only if some error(s) occured and contains
an array of errors. For error properties see @ref asm::core::Error::toArray().

@subsection sec_coreInterfacePlugins Core <-> Plugins

@ref core launches plugins with appropriate arguments either directly (in case of
PHP plugins), or from command-line (for more info see @ref plugins). Format of
returned data depends on plugin type as well. PHP plugins return
@ref asm::plugin::PluginResponse "PluginResponse" instance, while other plugins
return XML formatted as follows. If plugin run finished successfully, following
XML is returned:

@code
<?xml version="1.0" standalone="yes"?>
<plugin-reply>
	<output>
		<file>OUTPUT_FILE_PATH</file>
	</output>
	<criterion name="CRITERION_NAME">
		<passed>PASSED</passed>
		<fulfillment>FULFILLMENT</fulfillment>
		<details>DETAILS</details>
	</criterion>
	... <!-- more criteria -->
</plugin-reply>
@endcode

where <tt>\<output\></tt> tag is optional, @c CRITERION_NAME is unique, @c PASSED
is either @c true or @c false, @c FULFILLMENT is number from 0 to 100, and
@c DETAILS is text containing any other info.

If plugin run ended with error, following XML is returned:

@code
<?xml version="1.0" standalone="yes"?>
<plugin-reply>
	<error>ERROR</error>
</plugin-reply>
@endcode

where @c ERROR is text containing any and all error info.

*/